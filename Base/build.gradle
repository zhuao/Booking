apply plugin: 'com.android.library'

dependencies {

    compile fileTree("libs")

    compile "com.android.support:support-v4:" + androidSupportVersion
    compile "com.android.support:appcompat-v7:" + androidSupportVersion
    compile "com.android.support:design:" + androidSupportVersion
    compile "com.android.support:recyclerview-v7:" + androidSupportVersion
    testCompile 'org.mockito:mockito-all:1.10.19'
    testCompile 'junit:junit:4.12'
    testCompile ("com.squareup.assertj:assertj-android:1.0.0") {
        exclude group: 'com.android.support', module:'support-annotations'
    }
    testCompile 'org.robolectric:robolectric:3.0-rc3'
}

android {
    compileSdkVersion appTargetSDKVersion.toInteger()
    buildToolsVersion appBuildToolVersion

    defaultConfig {
        minSdkVersion appMinSDKVersion.toInteger()
        targetSdkVersion appTargetSDKVersion.toInteger()
    }
}

def package_namespace = "com.thoughtworks.android.booking"
def package_namespace_path = package_namespace.replaceAll("\\.", "/")

afterEvaluate { project ->
    android.libraryVariants.each { variant ->
        // workaround for missing R class for aar dependencies
        def copyTaskName = "copy${variant.name.capitalize()}AppCompat"
        task(copyTaskName, type:Copy) {
            dependsOn "process${variant.name.capitalize()}Resources"
            from { "build/generated/source/r/${variant.name}/$package_namespace_path" }
//            into { "build/generated/source/r/${variant.name}/android/support/v7/appcompat" }
            into { "src/test/java/android/support/v7/appcompat" }
            include 'R.java'
            filter { line -> line.contains("package ${package_namespace};") ? 'package android.support.v7.appcompat;' : line }
            outputs.upToDateWhen { false }
        }
        System.out.println("adding ${copyTaskName}")
        tasks.getByName("compile${variant.name.capitalize()}UnitTestJava") dependsOn copyTaskName
    }
}